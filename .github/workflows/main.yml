name: CD

on:
  push:
    branches: [develop]

jobs:
  build:
    name: build and upload to s3
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: build
        run: ./gradlew build
        env:
          DATASOURCE_URL: ${{ secrets.JESUSFINGERS_DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.JESUSFINGERS_DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.JESUSFINGERS_DATASOURCE_PASSWORD }}
          PORT: ${{ secrets.PORT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: compress files for deploy
        run: zip -r jesusfingers-backend.zip build/libs appspec.yml scripts

      - name: upload to s3
        run: aws s3 cp jesusfingers-backend.zip s3://${{ secrets.AWS_S3_BUCKET }}

      - name: send result to slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Integration Test # default: 8398a7@action-slack
          fields: repo,commit,message,author # default: repo,commit
          mention: here
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.


  deploy:
    needs: build
    name: deploy to ec2
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      - name: deploy
        run: aws deploy create-deployment --application-name ${{ secrets.CODEDEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},bundleType=zip,key=jesusfingers-backend.zip --region ${{ secrets.AWS_S3_REGION }} --file-exists-behavior OVERWRITE